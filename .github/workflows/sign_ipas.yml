name: IPA Signing

on:
  # schedule:
    # - cron: '0 3 * * *' # Run daily at 3:00 AM UTC 
  workflow_dispatch: # Allow manual triggering

# Grant permissions to commit status file and manage releases
permissions:
  contents: write
  actions: read # Needed for gh release commands

env:
  CERT_REPO: "loyahdev/certificates"
  CERT_STATUS_FILE: "certificate_status.json"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the default GitHub token
  SIGNING_INPUT_DIR: "signing_input"
  SIGNING_OUTPUT_DIR: "signing_output"
  SIGNED_IPAS_DIR: "signed_iPAs" # Final location within output dir
  BETA_RELEASE_TAG: "signed-ipas-beta"

jobs:
  sign_and_distribute:
    runs-on: ubuntu-latest
    outputs:
      signed_links: ${{ steps.generate_links.outputs.markdown_links }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: pip install Pillow argparse patool
        
      - name: Initialize Certificate Status File
        run: |
          if [ ! -f "$CERT_STATUS_FILE" ]; then
            echo '{}' > "$CERT_STATUS_FILE"
            echo "Initialized empty $CERT_STATUS_FILE"
          else
            echo "$CERT_STATUS_FILE already exists."
            # Ensure it's valid JSON or handle error
            if ! jq empty "$CERT_STATUS_FILE"; then
              echo "Error: $CERT_STATUS_FILE is not valid JSON. Resetting."
              echo '{}' > "$CERT_STATUS_FILE"
            fi
          fi

      - name: Fetch Latest Certificate Info from ${{ env.CERT_REPO }}
        id: cert_info
        run: |
          echo "Fetching latest release info from ${{ env.CERT_REPO }}..."
          # Get latest release JSON (not necessarily tagged 'latest')
          LATEST_RELEASE_JSON=$(gh release view --repo ${{ env.CERT_REPO }} --json tagName,body,assets)
          if [ -z "$LATEST_RELEASE_JSON" ]; then
            echo "Error: Could not fetch release info from ${{ env.CERT_REPO }}"
            exit 1
          fi

          echo "::group::Latest Release JSON"
          echo "$LATEST_RELEASE_JSON"
          echo "::endgroup::"

          # Parse details using jq
          TAG_NAME=$(echo "$LATEST_RELEASE_JSON" | jq -r '.tagName')
          BODY=$(echo "$LATEST_RELEASE_JSON" | jq -r '.body')

          # Extract UID and Revoked status from Body using grep/sed
          # Assuming UID is the only alphanumeric string after "UID=" on its line
          # Assuming Revoked is on its own line "Revoked: <value>"
          CERT_UID=$(echo "$BODY" | grep 'Subject:.*UID=' | sed -n 's/.*UID=\([a-zA-Z0-9]*\).*/\1/p')
          CERT_REVOKED_STR=$(echo "$BODY" | grep '^Revoked:' | sed 's/^Revoked: //')
          CERT_REVOKED=false
          if [[ "$CERT_REVOKED_STR" == "true" ]]; then
            CERT_REVOKED=true
          fi
          CERT_VALID_UNTIL=$(echo "$BODY" | grep '^Valid Until:' | sed 's/^Valid Until: //') # Optional but nice to have

          # Find the .zip asset URL (assuming only one .zip)
          CERT_ASSET_ZIP_URL=$(echo "$LATEST_RELEASE_JSON" | jq -r '.assets[] | select(.name | endswith(".zip")) | .url')
          CERT_ASSET_ZIP_NAME=$(echo "$LATEST_RELEASE_JSON" | jq -r '.assets[] | select(.name | endswith(".zip")) | .name')

          # Validate extracted info
          if [ -z "$CERT_UID" ] || [ -z "$CERT_ASSET_ZIP_URL" ]; then
            echo "Error: Could not parse required certificate details (UID or Asset URL) from release body/assets."
            echo "Body: $BODY"
            exit 1
          fi

          echo "Fetched Cert Name: ${CERT_ASSET_ZIP_NAME%.zip}"
          echo "Fetched Cert UID: $CERT_UID"
          echo "Fetched Cert Revoked: $CERT_REVOKED"
          echo "Fetched Cert Asset URL: $CERT_ASSET_ZIP_URL"
          echo "Fetched Cert Valid Until: $CERT_VALID_UNTIL"

          echo "cert_name=${CERT_ASSET_ZIP_NAME%.zip}" >> $GITHUB_OUTPUT
          echo "cert_uid=$CERT_UID" >> $GITHUB_OUTPUT
          echo "cert_revoked=$CERT_REVOKED" >> $GITHUB_OUTPUT
          echo "cert_asset_zip_url=$CERT_ASSET_ZIP_URL" >> $GITHUB_OUTPUT
          echo "cert_asset_zip_name=$CERT_ASSET_ZIP_NAME" >> $GITHUB_OUTPUT
          echo "cert_valid_until=$CERT_VALID_UNTIL" >> $GITHUB_OUTPUT
          echo "cert_tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Check Certificate Status and Decide Action
        id: cert_check
        run: |
          CURRENT_UID="${{ steps.cert_info.outputs.cert_uid }}"
          IS_REVOKED="${{ steps.cert_info.outputs.cert_revoked }}"
          STORED_JSON=$(cat "$CERT_STATUS_FILE")
          STORED_UID=$(echo "$STORED_JSON" | jq -r '.uid // empty')
          STORED_REVOKED=$(echo "$STORED_JSON" | jq -r .revoked)

          echo "Current Cert UID: $CURRENT_UID, Revoked: $IS_REVOKED"
          echo "Stored Cert UID: $STORED_UID, Revoked: $STORED_REVOKED"

          NEEDS_UPDATE=false
          PROCEED_WITH_SIGNING=false

          if [[ "$IS_REVOKED" == "true" ]]; then
            echo "Certificate $CURRENT_UID is REVOKED."
            if [[ "$STORED_UID" != "$CURRENT_UID" || "$STORED_REVOKED" != "true" ]]; then
              echo "Updating status file to reflect revocation."
              NEEDS_UPDATE=true
            else
              echo "Status file already reflects revocation. No action needed."
            fi
            PROCEED_WITH_SIGNING=false # Do not sign with a revoked certificate
          else
            echo "Certificate $CURRENT_UID is valid (not revoked)."
            PROCEED_WITH_SIGNING=true
            if [[ "$STORED_UID" != "$CURRENT_UID" || "$STORED_REVOKED" != "false" ]]; then
               echo "New certificate or status change detected. Status file needs update after signing."
               # We'll mark for update, but only commit *after* successful signing.
               NEEDS_UPDATE=true # Mark that an update is potentially needed
            else
               echo "Certificate status matches stored record. Exiting."
               # exit 1
            fi
          fi

          echo "needs_update=$NEEDS_UPDATE" >> $GITHUB_OUTPUT
          echo "proceed_signing=$PROCEED_WITH_SIGNING" >> $GITHUB_OUTPUT

      - name: Stop Workflow if Certificate is Revoked
        if: steps.cert_check.outputs.proceed_signing == 'false' && steps.cert_check.outputs.needs_update == 'false'
        run: |
          echo "Certificate is revoked and status file is up-to-date. Stopping workflow."
          exit 0 # Exit successfully, no signing needed

      - name: Update Status File for Revoked Cert (if needed) and Stop
        if: steps.cert_check.outputs.proceed_signing == 'false' && steps.cert_check.outputs.needs_update == 'true'
        run: |
          echo "Certificate is revoked. Updating status file and stopping."
          jq -n \
            --arg uid "${{ steps.cert_info.outputs.cert_uid }}" \
            --arg revoked "${{ steps.cert_info.outputs.cert_revoked }}" \
            --arg until "${{ steps.cert_info.outputs.cert_valid_until }}" \
            --arg tag "${{ steps.cert_info.outputs.cert_tag }}" \
            '{uid: $uid, revoked: ($revoked == "true"), valid_until: $until, last_checked_tag: $tag, last_update: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))}' > "$CERT_STATUS_FILE"

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add "$CERT_STATUS_FILE"
          # Check if there are changes to commit
          if git diff --staged --quiet; then
             echo "No changes to commit to $CERT_STATUS_FILE."
          else
             git commit -m "Update certificate status: ${{ steps.cert_info.outputs.cert_uid }} (Revoked)"
             git push
             echo "Committed status file update."
          fi
          echo "Workflow stopped due to revoked certificate."
          # Use exit 1 to make the job fail clearly, indicating signing didn't happen
          exit 1

      # --- Steps below only run if proceed_signing is true ---

      - name: Download and Prepare Certificate Files
        if: steps.cert_check.outputs.proceed_signing == 'true'
        id: prep_cert_files
        run: |
          echo "Proceeding with signing using certificate ${{ steps.cert_info.outputs.cert_uid }}"
          CERT_ZIP_URL="${{ steps.cert_info.outputs.cert_asset_zip_url }}"
          CERT_ZIP_NAME="${{ steps.cert_info.outputs.cert_asset_zip_name }}"
          TEMP_CERT_DIR=$(mktemp -d)
          echo "Temporary certificate directory: $TEMP_CERT_DIR"

          echo "Downloading certificate asset: $CERT_ZIP_NAME from $CERT_ZIP_URL"
          curl -L -o "$TEMP_CERT_DIR/$CERT_ZIP_NAME" "$CERT_ZIP_URL"
          if [ $? -ne 0 ]; then echo "Error downloading certificate zip"; exit 1; fi

          echo "Unzipping certificate asset..."
          unzip -q "$TEMP_CERT_DIR/$CERT_ZIP_NAME" -d "$TEMP_CERT_DIR"
          if [ $? -ne 0 ]; then echo "Error unzipping certificate asset"; exit 1; fi

          # Find .p12, .mobileprovision, and password.txt
          P12_FILE=$(find "$TEMP_CERT_DIR" -maxdepth 1 -name '*.p12' | head -n 1)
          PROFILE_FILE=$(find "$TEMP_CERT_DIR" -maxdepth 1 -name '*.mobileprovision' | head -n 1)
          PASSWORD_FILE=$(find "$TEMP_CERT_DIR" -maxdepth 1 -name 'password.txt' | head -n 1)

          if [ -z "$P12_FILE" ] || [ -z "$PROFILE_FILE" ] || [ -z "$PASSWORD_FILE" ]; then
            echo "Error: Missing .p12, .mobileprovision, or password.txt in the downloaded zip."
            ls -l "$TEMP_CERT_DIR"
            exit 1
          fi

          CERT_PASSWORD=$(cat "$PASSWORD_FILE")
          if [ -z "$CERT_PASSWORD" ]; then
            echo "Error: password.txt is empty."
            exit 1
          fi
          # Mask the password in logs
          echo "::add-mask::$CERT_PASSWORD"

          # Prepare input directory for signing tool
          mkdir -p "$SIGNING_INPUT_DIR"
          cp "$P12_FILE" "$SIGNING_INPUT_DIR/"
          cp "$PROFILE_FILE" "$SIGNING_INPUT_DIR/"

          echo "Certificate files prepared in $SIGNING_INPUT_DIR"
          echo "p12_file=$(basename "$P12_FILE")" >> $GITHUB_OUTPUT
          echo "profile_file=$(basename "$PROFILE_FILE")" >> $GITHUB_OUTPUT
          echo "cert_password=$CERT_PASSWORD" >> $GITHUB_OUTPUT # Output password for use in next step

      - name: Download IPAs from Latest Release
        id: download_ipas
        if: steps.cert_check.outputs.proceed_signing == 'true'
        run: |
          echo "Downloading required IPA files..."
          # Get assets from the *latest* release of the current repo
          # Using `--latest` flag might not be reliable if you use pre-releases frequently.
          # Fetching the most recent non-prerelease, non-draft release:
          LATEST_TAG=$(gh release list --repo ${{ github.repository }} --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r '.[0].tagName')
          echo "Latest tag:"
          echo $LATEST_TAG
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          cd "$SIGNING_INPUT_DIR"
          gh release download $LATEST_TAG -R ${{ github.repository }} --pattern "*.ipa"
          rm Agario.ipa
          
          if ! [  -n "$(ls -A)" ]; then
            echo "Warning: No .ipa files (excluding Agario.ipa) downloaded."
            touch .no_ipas_found # Create a marker file
          else
            echo "Found IPAs to download"
          fi

      - name: Install zsign
        if: steps.cert_check.outputs.proceed_signing == 'true'
        id: install_zsign
        run: |
          echo "Fetching latest zsign release info..."
          ZSIGN_RELEASE_JSON=$(gh release view --repo zhlynn/zsign --json assets)
          if [ -z "$ZSIGN_RELEASE_JSON" ]; then echo "Error fetching zsign release info"; exit 1; fi

          ZSIGN_ASSET_URL=$(echo "$ZSIGN_RELEASE_JSON" | jq -r '.assets[] | select(.name | contains("ubuntu-x64.zip")) | .url')
          ZSIGN_ASSET_NAME=$(echo "$ZSIGN_RELEASE_JSON" | jq -r '.assets[] | select(.name | contains("ubuntu-x64.zip")) | .name')

          if [ -z "$ZSIGN_ASSET_URL" ]; then echo "Error finding zsign ubuntu-x64 asset URL"; exit 1; fi

          echo "Downloading zsign asset: $ZSIGN_ASSET_NAME"
          curl -L -o "$ZSIGN_ASSET_NAME" "$ZSIGN_ASSET_URL"
          if [ $? -ne 0 ]; then echo "Error downloading zsign"; exit 1; fi

          ZSIGN_DIR="zsign_bin"
          mkdir "$ZSIGN_DIR"
          unzip -q "$ZSIGN_ASSET_NAME" -d "$ZSIGN_DIR"
          if [ $? -ne 0 ]; then echo "Error unzipping zsign"; exit 1; fi

          ZSIGN_BIN_PATH=$(find "$ZSIGN_DIR" -name 'zsign' -type f | head -n 1)
          if [ -z "$ZSIGN_BIN_PATH" ]; then echo "Error: zsign binary not found after unzip"; exit 1; fi

          chmod +x "$ZSIGN_BIN_PATH"
          echo "zsign_bin_path=$ZSIGN_BIN_PATH" >> $GITHUB_OUTPUT
          # Verify
          which $ZSIGN_BIN_PATH
          $ZSIGN_BIN_PATH -v

      - name: Download iPA-Edit Script
        if: steps.cert_check.outputs.proceed_signing == 'true'
        run: |
          IPAEDIT_URL="https://raw.githubusercontent.com/binnichtaktiv/iPA-Edit/8d2cd9dafc7f890ffb59f4bb20bc93fced736593/ipaedit.py"
          echo "Downloading iPA-Edit script from $IPAEDIT_URL"
          curl -L -O "$IPAEDIT_URL"
          if [ $? -ne 0 ]; then echo "Error downloading ipaedit.py"; exit 1; fi
          chmod +x ipaedit.py

      - name: Sign IPAs using iPA-Edit and zsign
        if: steps.cert_check.outputs.proceed_signing == 'true'
        run: |
          # Check if we actually downloaded any IPAs
          if [ -f ".no_ipas_found" ]; then
            echo "Skipping signing step as no IPAs were downloaded."
            exit 0
          fi

          # Check if input directory exists and has IPAs
          if [ ! -d "$SIGNING_INPUT_DIR" ] || [ -z "$(find "$SIGNING_INPUT_DIR" -maxdepth 1 -name '*.ipa')" ]; then
              echo "Error: Input directory '$SIGNING_INPUT_DIR' is missing or contains no IPA files."
              ls -l . # List current dir content for debugging
              exit 1
          fi
          
          ZSIGN_PATH="${{ steps.install_zsign.outputs.zsign_bin_path }}" # Get zsign binary path
          CERT_PASSWORD="${{ steps.prep_cert_files.outputs.cert_password }}" # Get cert password
          
          if [ -z "$ZSIGN_PATH" ]; then echo "Error: ZSIGN_PATH is empty."; exit 1; fi
          if [ ! -x "$ZSIGN_PATH" ]; then echo "Error: zsign binary not found or not executable at '$ZSIGN_PATH'"; exit 1; fi
          if [ -z "$CERT_PASSWORD" ]; then echo "Error: CERT_PASSWORD is empty."; exit 1; fi # Should be masked in logs

          echo "Running iPA-Edit..."
          echo "  zsign path: $ZSIGN_PATH"
          echo "  Input Dir: $SIGNING_INPUT_DIR"
          echo "  Output Dir: $SIGNING_OUTPUT_DIR"
          echo "  Using signing option: -s"
          
          # Pipe the path and password to the script's stdin
          printf "%s\n%s\n%s\n" "$ZSIGN_PATH" "Y" "$CERT_PASSWORD" | \
            python3 ./ipaedit.py -i "$SIGNING_INPUT_DIR" -o "$SIGNING_OUTPUT_DIR" -s

          if [ $? -ne 0 ]; then
            echo "Error running ipaedit.py"
            # Add more debug info if needed, e.g., list output dir contents
            ls -l "$SIGNING_OUTPUT_DIR"
            exit 1
          fi

          # Verify output directory exists
          if [ ! -d "$SIGNING_OUTPUT_DIR/$SIGNED_IPAS_DIR" ]; then
            echo "Error: Expected output directory '$SIGNING_OUTPUT_DIR/$SIGNED_IPAS_DIR' not found after running ipaedit.py."
            ls -l "$SIGNING_OUTPUT_DIR"
            exit 1
          fi

          echo "Signing complete. Signed IPAs are in $SIGNING_OUTPUT_DIR/$SIGNED_IPAS_DIR"

      - name: Create or Update Beta Release and Upload Signed IPAs
        if: steps.cert_check.outputs.proceed_signing == 'true'
        run: |
          # Check if signing produced output
           if [ -f ".no_ipas_found" ]; then
            echo "Skipping release upload as no IPAs were processed."
            exit 0
          fi
          if [ ! -d "$SIGNING_OUTPUT_DIR/$SIGNED_IPAS_DIR" ] || [ -z "$(ls -A "$SIGNING_OUTPUT_DIR/$SIGNED_IPAS_DIR")" ]; then
            echo "Skipping release upload as no signed IPAs were found in $SIGNING_OUTPUT_DIR/$SIGNED_IPAS_DIR"
            exit 0
          fi

          echo "Creating/Updating beta release: $BETA_RELEASE_TAG"
          # Check if release exists, create if not
          gh release view "$BETA_RELEASE_TAG" --repo ${{ github.repository }} > /dev/null 2>&1 || \
            gh release create "$BETA_RELEASE_TAG" \
              --repo ${{ github.repository }} \
              --title "Signed IPAs" \
              --notes "Automatically signed IPAs" \
              --prerelease

          echo "Uploading signed IPAs to release $BETA_RELEASE_TAG..."
          # Use --clobber to overwrite existing assets with the same name
          gh release upload "$BETA_RELEASE_TAG" "$SIGNING_OUTPUT_DIR/$SIGNED_IPAS_DIR"/* --clobber --repo ${{ github.repository }}
          if [ $? -ne 0 ]; then echo "Error uploading signed IPAs"; exit 1; fi
          echo "IPAs uploaded successfully."

      - name: Update Download Count and Generate Installation Links/Update README
        # Only run if the previous steps indicate signing should proceed
        if: steps.cert_check.outputs.proceed_signing == 'true'
        id: update_readme_and_count
        env:
          DOWNLOAD_COUNT_FILE: signed_ipas_downloads_count.txt # Define filename
          # Inherit other necessary env vars like SIGNING_OUTPUT_DIR, SIGNED_IPAS_DIR, BETA_RELEASE_TAG
        run: |
          # === 1. Update Total Download Count ===
          echo "Fetching existing assets for download count from release $BETA_RELEASE_TAG..."
          EXISTING_ASSETS_JSON=$(gh release view "$BETA_RELEASE_TAG" --json assets --repo ${{ github.repository }})
          if [ $? -ne 0 ]; then
             # Non-fatal: maybe the release was *just* created or has no assets yet.
             echo "Warning: Could not fetch assets from beta release $BETA_RELEASE_TAG to get download counts. Proceeding without count update."
             latest_download_count=0
          else
             latest_download_count=$(echo "$EXISTING_ASSETS_JSON" | jq '[ .assets[]? | .downloadCount? // 0 ] | add') # Calculate sum, handle null/missing assets/counts
             if ! [[ "$latest_download_count" =~ ^[0-9]+$ ]]; then
               echo "Warning: Could not extract valid numeric download count. Got '$latest_download_count'. Setting to 0."
               latest_download_count=0
             else
               echo "Download count for assets in release $BETA_RELEASE_TAG: $latest_download_count"
             fi
          fi

          # Fetch existing total count from file
          existing_total_count=0
          if [ -f "$DOWNLOAD_COUNT_FILE" ]; then
            # Ensure file exists and read its content, default to 0 if invalid
            count_from_file=$(cat "$DOWNLOAD_COUNT_FILE")
            if [[ "$count_from_file" =~ ^[0-9]+$ ]]; then
              existing_total_count=$count_from_file
              echo "Existing total count from $DOWNLOAD_COUNT_FILE: $existing_total_count"
            else
              echo "Warning: $DOWNLOAD_COUNT_FILE contained non-numeric data ('$count_from_file'). Resetting to 0."
              existing_total_count=0
            fi
          else
            echo "$DOWNLOAD_COUNT_FILE not found. Starting count from 0."
          fi

          # Calculate new total and write to file
          new_total_count=$((existing_total_count + latest_download_count))
          echo "New total download count: $new_total_count"
          echo "$new_total_count" > "$DOWNLOAD_COUNT_FILE"

          # Commit and push the download count file
          # Configure Git user (might be redundant if done elsewhere, but safe)
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Check if the count file actually changed before committing
          git add "$DOWNLOAD_COUNT_FILE"
          if git diff --staged --quiet -- "$DOWNLOAD_COUNT_FILE"; then
             echo "$DOWNLOAD_COUNT_FILE unchanged or newly created with 0 count. Skipping commit for count file."
          else
             echo "Committing updated download count..."
             git commit -m "chore: Update total signed IPA download count" -m "Total count updated to $new_total_count based on release $BETA_RELEASE_TAG before potential asset replacement."
             echo "Pushing download count update to branch ${{ github.ref_name }}..."
             git push origin HEAD:${{ github.ref_name }}
             if [ $? -ne 0 ]; then
                 echo "Error: Failed to push $DOWNLOAD_COUNT_FILE changes. Continuing with README update, but count might be outdated."
                 # Decide if this is fatal, for now we continue
             else
                 echo "Download count file updated and pushed successfully."
             fi
          fi

          # === 2. Initial Checks for README Update ===
          if [ -f ".no_ipas_found" ] || [ ! -d "$SIGNING_OUTPUT_DIR/$SIGNED_IPAS_DIR" ] || [ -z "$(ls -A "$SIGNING_OUTPUT_DIR/$SIGNED_IPAS_DIR")" ]; then
            echo "No signed IPAs found or output directory is empty. Skipping README update."
            exit 0
          fi

          # === 3. Fetch Release Asset Info for Preflight ===
          # Note: This fetches asset info again. Could potentially reuse EXISTING_ASSETS_JSON if structure is guaranteed identical.
          # Fetching again ensures we have the latest URLs if asset upload happened between count check and here (unlikely in same step).
          echo "Fetching asset URLs from release $BETA_RELEASE_TAG for preflight service..."
          RELEASE_ASSETS_JSON=$(gh release view "$BETA_RELEASE_TAG" --json assets --repo ${{ github.repository }})
          if [ $? -ne 0 ] || [ -z "$RELEASE_ASSETS_JSON" ] || [ "$(echo "$RELEASE_ASSETS_JSON" | jq '.assets | length')" -eq 0 ]; then
             echo "Warning: Error fetching assets or no assets found in release $BETA_RELEASE_TAG after count update. Cannot generate installation links."
             exit 0 # Exit step successfully but without doing the README update part
          fi

          # === 4. Process IPAs and Modify README ===
          SIGNED_IPA_FILES=("$SIGNING_OUTPUT_DIR/$SIGNED_IPAS_DIR"/*.ipa)
          readme_modified=false # Flag to track if README was changed

          # Create a temporary file for modifications
          temp_readme=$(mktemp)
          cp README.md "$temp_readme"

          echo "Processing IPAs and updating README.md..."
          for ipa_file_path in "${SIGNED_IPA_FILES[@]}"; do
            ipa_filename=$(basename "$ipa_file_path")
            echo "Processing $ipa_filename..."

            # --- Get Download URL for Preflight Service ---
            ipa_download_url=$(echo "$RELEASE_ASSETS_JSON" | jq -r --arg name "$ipa_filename" '.assets[] | select(.name == $name) | .browser_download_url')
            if [ -z "$ipa_download_url" ] || [ "$ipa_download_url" == "null" ]; then
              echo "  Warning: Could not find browser_download_url for $ipa_filename in release assets. Trying asset URL..."
              ipa_download_url=$(echo "$RELEASE_ASSETS_JSON" | jq -r --arg name "$ipa_filename" '.assets[] | select(.name == $name) | .url')
              if [ -z "$ipa_download_url" ] || [ "$ipa_download_url" == "null" ]; then
                 echo "  Error: Could not find any download URL for $ipa_filename in release assets. Skipping link generation for this file."
                 continue # Skip to the next IPA
              fi
               echo "  Using API asset URL: $ipa_download_url"
            else
              echo "  Found browser download URL: $ipa_download_url"
            fi

            # --- Call Preflight Service ---
            echo "  Calling preflight service (ipa.s0n1c.ca)..."
            response=$(curl --request POST \
              --silent --show-error --fail \
              --url https://ipa.s0n1c.ca/preflight \
              --header 'Content-Type: application/json' \
              --data "{\"url\": \"$ipa_download_url\"}")

            if [ $? -ne 0 ]; then
              echo "  Error calling preflight service for $ipa_filename."
              echo "  Response body (if any): $response" # Log response body on error
              continue # Skip to the next IPA
            fi

            # --- Extract ID and Construct Links ---
            install_id=$(echo "$response" | jq -r '.id')
            if [ -z "$install_id" ] || [ "$install_id" == "null" ]; then
              echo "  Error: Could not get 'id' from preflight response for $ipa_filename. Response: $response"
              continue # Skip to the next IPA
            fi
            echo "  Received ID: $install_id"

            itms_url="itms-services://?action=download-manifest&url=https://ipa.s0n1c.ca/${install_id}/manifest.plist"
            install_markdown_link_url="https://fwuf.in/#/${itms_url}"
            install_link_text_to_insert="[Install](${install_markdown_link_url}) / "

            # --- Define Target Link in README ---
            # *** IMPORTANT: Ensure this tag matches the tag used when assets were ACTUALLY uploaded ***
            # If assets are uploaded *later* in the workflow, this tag might need adjustment or be passed as output from upload step
            # Assuming steps.download_ipas.outputs.latest_tag holds the correct tag for the *current* assets.
            target_direct_download_link="[Direct download](https://github.com/${{ github.repository }}/releases/download/${{ steps.download_ipas.outputs.latest_tag }}/${ipa_filename})"

            # --- Escape the target link for use in sed pattern ---
            escaped_target=$(printf '%s\n' "$target_direct_download_link" | sed -e 's/[][\\/.^$*]/\\&/g' -e 's/|/\\|/g' -e 's/+/(%2B|+)/g') # Added + escaping for URLs
            if [ -z "$escaped_target" ]; then
                echo "  Error: Failed to escape the target string. Skipping."
                continue
            fi

            # --- Construct the full new replacement string ---
            # This is what we want the final output to look like
            replacement_string="${install_link_text_to_insert}${target_direct_download_link}"
            escaped_replacement=$(printf '%s\n' "$replacement_string" | sed -e 's/[\/&|]/\\&/g') # Escape only sed delimiters and backslash/ampersand for RHS
             if [ -z "$escaped_replacement" ]; then
                 echo "  Error: Failed to escape the replacement string. Skipping."
                 continue
             fi

            # --- Modify README.md ---
            # Don't skip if exists. Instead, use sed to replace the line segment.
            # We will replace '[Optional Install Link / ]Direct Download Link' with 'New Install Link / Direct Download Link'

            # Pattern to match: Optional '[Install](...) / ' followed by the direct download link.
            # Using extended regex (-E) for the optional group '?' and better readability.
            # Need to escape characters special to ERE inside the pattern part.
            install_prefix_pattern='\[Install\]([^)]*) */ *' # Matches '[Install](...) / ' with optional spaces
            combined_pattern_ere="(${install_prefix_pattern})?${escaped_target}"

            echo "  Updating install link in temporary README ($temp_readme)..."
            # Use sed -E. Use a different delimiter (|) to avoid clash with URLs.
            # The goal is to replace the optional old prefix AND the target, with the new replacement string.
            sed -E "s|${combined_pattern_ere}|${escaped_replacement}|" "$temp_readme" > "$temp_readme.next"

            if [ $? -eq 0 ]; then
               # Check if a change actually occurred before marking readme_modified
               if ! cmp -s "$temp_readme" "$temp_readme.next"; then
                  echo "  Successfully updated link in temporary file."
                  mv "$temp_readme.next" "$temp_readme" # Update the temporary file for the next iteration
                  # Mark modified only once we are sure at the end
               else
                  echo "  Warning: sed command succeeded but did not modify the temp README. Target link pattern may not exist exactly as specified: ${target_direct_download_link}"
                  rm -f "$temp_readme.next" # Clean up unused file
               fi
            else
               echo "  Error: sed command failed while processing $ipa_filename."
               rm -f "$temp_readme.next" # Clean up potentially corrupt file
               # Decide how to handle sed failure - continue or exit?
               # continue # Continue to next IPA for now
               # exit 1 # Or exit the script with an error
            fi

          done # End of for loop iterating through IPAs

          # === 5. Final Check and Commit README ===
          # Check if the final temp file is actually different from the original README
          if ! cmp -s README.md "$temp_readme"; then
            echo "README.md was modified. Committing changes..."
            mv "$temp_readme" README.md # Replace original with modified temp file
            readme_modified=true # Mark that we need to commit

            # Git configuration should be done already by the count update part
            # git config --global user.name 'github-actions[bot]'
            # git config --global user.email 'github-actions[bot]@users.noreply.github.com'

            # Add, commit, and push README
            git add README.md
            if git diff --staged --quiet; then
               echo "No changes staged for README.md, skipping commit (this shouldn't happen if cmp detected changes)."
            else
               git commit -m "docs: Update README with install links for ${BETA_RELEASE_TAG}" -m "Generated by GitHub Actions workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
               echo "Pushing README changes to branch ${{ github.ref_name }}..."
               git push origin HEAD:${{ github.ref_name }}
               if [ $? -ne 0 ]; then
                   echo "Error: Failed to push README.md changes."
                   # Consider reverting README change? `git checkout HEAD -- README.md`?
                   exit 1
               else
                   echo "README.md update pushed successfully."
               fi
            fi
          else
            echo "No effective changes were made to README.md or no IPAs required updates."
            rm "$temp_readme" # Clean up unused temp file
          fi

          echo "README update process finished."


      - name: Update Certificate Status File (After Success)
        # Only run if signing was attempted and needed update OR if it's a new cert
        if: steps.cert_check.outputs.proceed_signing == 'true' && steps.cert_check.outputs.needs_update == 'true'
        run: |
          echo "Updating status file with latest successful signing info for ${{ steps.cert_info.outputs.cert_uid }}."
          jq -n \
            --arg uid "${{ steps.cert_info.outputs.cert_uid }}" \
            --arg revoked "${{ steps.cert_info.outputs.cert_revoked }}" \
            --arg until "${{ steps.cert_info.outputs.cert_valid_until }}" \
            --arg tag "${{ steps.cert_info.outputs.cert_tag }}" \
            '{uid: $uid, revoked: ($revoked == "true"), valid_until: $until, last_checked_tag: $tag, last_update: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))}' > "$CERT_STATUS_FILE"

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add "$CERT_STATUS_FILE"
           # Check if there are changes to commit
          if git diff --staged --quiet; then
             echo "No changes to commit to $CERT_STATUS_FILE."
          else
             git commit -m "Update certificate status: ${{ steps.cert_info.outputs.cert_uid }} (Valid/Used)"
             git push
             echo "Committed status file update."
          fi
