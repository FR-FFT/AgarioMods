name: Check for updates

on:
  schedule:
    - cron: '0 * * * *'  # hourly
  workflow_dispatch:

jobs:
  check_for_changes:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    outputs:
          change_detected: ${{ steps.check_change.outputs.change_detected }}

    steps:
      - name: Check for update
        id: check_change
        run: |
          response=$(curl -s https://spangle-miniature-crime.glitch.me/?uid=1.7.2)  
          echo "Response: $response"

          
          
          if [[ "$response" != "tru" ]]; then
            echo "Change detected!"
            echo "change_detected=$response" >> $GITHUB_OUTPUT
          else
            echo "No change detected."
            echo "change_detected=false" >> $GITHUB_OUTPUT
          fi

  download_ipa:
    if: needs.check_for_changes.outputs.change_detected != 'false'
    runs-on: ubuntu-latest
    needs: check_for_changes
    outputs:
      version: ${{ steps.fetch_repo_data.outputs.ipa_version }}
    steps:
      - name: Debug
        run: echo ${{ needs.check_for_changes.outputs.change_detected }}
        
      - name: Fetch repo html
        id: fetch_repo_data
        run: |
          URL="https://ytbshark.github.io/"
          echo "Fetching HTML from $URL..."

          IPA_URL=$(curl -s "$URL" | grep -oE 'https?://[^"]+\.ipa' | head -n 1)
      
          if [[ -z "$IPA_URL" ]]; then
            echo "No .ipa file found!"
            exit 1
          fi
          
          echo "Found IPA: $IPA_URL"
          echo "IPA_URL=$IPA_URL" >> $GITHUB_ENV
          VERSION=$(echo "$IPA_URL" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1 | tr -d '\n')
          echo "Version: '$VERSION'"
          echo "ipa_version=${VERSION}"  >> $GITHUB_OUTPUT
          
          
      - name: Download IPA file
        run: |
          if [[ -z "$IPA_URL" ]]; then
            echo "No IPA URL found, skipping download."
            exit 1
          fi
          
          echo "Downloading IPA from $IPA_URL..."
          curl -L -o "SharkMod v${{ steps.fetch_repo_data.outputs.ipa_version }}.ipa" "$IPA_URL"

          ls | grep .ipa | xargs -I '{}' mv {} SharkMod_v${{ steps.fetch_repo_data.outputs.ipa_version }}.zip
          
      - name: get ipa name
        id: get_ipa_name
        run: |
          ipa_name=$(ls | grep .zip)
          echo "name=SharkMod_v${{ steps.fetch_repo_data.outputs.ipa_version }}.zip" >> $GITHUB_OUTPUT
          echo $ipa_name
          
      - name: Unzip
        run: unzip ${{ steps.get_ipa_name.outputs.name }}

      - name: extract dylib
        run: |
          cp Payload/agar.io.app/Frameworks/sharkmod.dylib sharkmod.dylib

      - name: Clean up workspace
        run: rm -rf Payload
        
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: List files
        run: ls -la  # Shows repo contents

      - name: Move dylib
        run: |
          mv sharkmod.dylib ./mods/shark/tweaks/sharkmod.dylib -f

      - name: Update this workflow
        run: |
          sed -i -E "s#https://spangle-miniature-crime.glitch.me/?uid=[0-9.]+#$https://spangle-miniature-crime.glitch.me/?uid=${{ steps.fetch_repo_data.outputs.ipa_version }}#" .github/workflows/check_updates.yml

      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: Updated sharkmod.dylib
          add: mods/shark/tweaks/sharkmod.dylib .github/workflows/check_updates.yml

      - name: Trigger new release with main.yml
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ipa_name="${{ steps.get_ipa_name.outputs.name }}"
          release_title="$ipa_name"
          release_version="${release_title#SharkMod_}"
          echo "release_title=$release_title"
          echo "release_version=$release_version"
          # gh workflow run ModInjector -f release_title="$release_title" -f release_description="Automatically updated Shark's mod to latest version" -f release_tag="shark-v$release_version"
